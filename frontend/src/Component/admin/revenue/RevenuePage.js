import React, { useEffect, useState } from "react";
import { getRevenue } from "../../../services/revenueService"; // Gi·ªØ l·∫°i h√†m getRevenue
import './RevenuePage.css'; // N·∫øu t·ªáp CSS c·ªßa b·∫°n ƒë∆∞·ª£c l∆∞u trong c√πng th∆∞ m·ª•c

import { Line } from "react-chartjs-2";
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend,
} from "chart.js";

// Register Chart.js components
ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
);

const RevenuePage = () => {
    const [revenue, setRevenue] = useState(0);
    const [orders, setOrders] = useState([]);
    const [chartData, setChartData] = useState({
        labels: [],
        datasets: [
            {
                label: "Doanh thu theo ng√†y",
                data: [],
                borderColor: "rgba(75,192,192,1)",
                backgroundColor: "rgba(75,192,192,0.2)",
                fill: true,
            },
        ],
    });
    const [totalRevenuePerPeriod, setTotalRevenuePerPeriod] = useState(0); // Th√™m state cho t·ªïng doanh thu theo ng√†y/th√°ng/nƒÉm
    const [filterType, setFilterType] = useState("day"); // Ch·ªçn filter: day, month, year
    const [loading, setLoading] = useState(true);  // Th√™m state loading

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);

            try {
                // L·∫•y t·ªïng doanh thu v√† ƒë∆°n h√†ng ƒë√£ giao theo filterType
                const response = await getRevenue(filterType);

                console.log('T·ªïng doanh thu:', response.totalRevenue); // Ki·ªÉm tra t·ªïng doanh thu
                console.log('ƒê∆°n h√†ng ƒë√£ giao:', response.deliveredOrders); // Ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ giao

                // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu h·ª£p l·ªá
                if (response && response.totalRevenue !== undefined && Array.isArray(response.deliveredOrders)) {
                    setRevenue(response.totalRevenue);
                    setOrders(response.deliveredOrders);

                    // L·∫•y d·ªØ li·ªáu doanh thu theo ng√†y/th√°ng/nƒÉm t·ª´ API
                    const revenueResponse = response.deliveredOrders;

                    console.log('D·ªØ li·ªáu doanh thu theo filterType:', revenueResponse); // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ

                    // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu doanh thu h·ª£p l·ªá
                    if (revenueResponse && Array.isArray(revenueResponse) && revenueResponse.length > 0) {
                        // Nh√≥m doanh thu theo ng√†y/th√°ng/nƒÉm
                        const groupedRevenue = {};
                        let totalRevenue = 0;

                        revenueResponse.forEach((order) => {
                            const date = new Date(order.createdAt);
                            let label;
                            
                            // Ch·ªçn nh√≥m theo ng√†y, th√°ng, ho·∫∑c nƒÉm
                            if (filterType === "day") {
                                label = date.toLocaleDateString(); // Cho ng√†y
                            } else if (filterType === "month") {
                                label = `${date.getMonth() + 1}/${date.getFullYear()}`; // Cho th√°ng/nƒÉm
                            } else if (filterType === "year") {
                                label = `${date.getFullYear()}`; // Cho nƒÉm
                            }

                            // T√≠nh t·ªïng doanh thu cho m·ªói nh√≥m th·ªùi gian
                            if (!groupedRevenue[label]) {
                                groupedRevenue[label] = 0;
                            }
                            groupedRevenue[label] += order.totalPrice;
                            totalRevenue += order.totalPrice; // C·ªông d·ªìn doanh thu t·ªïng
                        });

                        // Chuy·ªÉn nh√≥m doanh thu th√†nh labels v√† data cho bi·ªÉu ƒë·ªì
                        const labels = Object.keys(groupedRevenue);
                        const data = Object.values(groupedRevenue);

                        console.log("Grouped Revenue Labels:", labels);  // Log labels
                        console.log("Grouped Revenue Data:", data);    // Log data

                        // C·∫≠p nh·∫≠t d·ªØ li·ªáu bi·ªÉu ƒë·ªì v√† t·ªïng doanh thu cho t·ª´ng filter
                        setChartData({
                            labels: labels,
                            datasets: [
                                {
                                    label: `Doanh thu theo ${filterType} (VND)`,
                                    data: data,
                                    borderColor: "rgba(75,192,192,1)",
                                    backgroundColor: "rgba(75,192,192,0.2)",
                                    fill: true,
                                },
                            ],
                        });

                        // C·∫≠p nh·∫≠t t·ªïng doanh thu theo filterType
                        setTotalRevenuePerPeriod(totalRevenue);
                    } else {
                        console.error("D·ªØ li·ªáu doanh thu kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng");
                    }
                } else {
                    console.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
                }
            } catch (error) {
                console.error("Error fetching revenue:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [filterType]); // Re-fetch data if filterType changes

    return (
        <div className="revenue-page">
            {/* <h2 className="revenue-page__title">üìä Doanh thu h√¥m nay: {revenue.toLocaleString()} VND</h2> */}
             {/* Bi·ªÉu ƒë·ªì doanh thu */}
             {/* C√°c filter: day, month, year */}
            <div>
                <button onClick={() => setFilterType("day")}>Doanh thu theo ng√†y</button>
                <button onClick={() => setFilterType("month")}>Doanh thu theo th√°ng</button>
                <button onClick={() => setFilterType("year")}>Doanh thu theo nƒÉm</button>
            </div>
             <div className="revenue-page__chart">
                <h3>üìä Bi·ªÉu ƒë·ªì doanh thu theo {filterType}</h3>
                {chartData.labels.length > 0 ? (
                    <Line data={chartData} />
                ) : (
                    <div>üö´ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì</div>
                )}
            </div>

            {/* Hi·ªÉn th·ªã t·ªïng doanh thu theo filterType */}
            {totalRevenuePerPeriod > 0 && (
                <div className="revenue-page__total-revenue">
                    <h4>T·ªïng doanh thu theo {filterType}: {totalRevenuePerPeriod.toLocaleString()} VND</h4>
                </div>
            )}

            
            <h3 className="revenue-page__subtitle">üìú L·ªãch s·ª≠ ƒë∆°n h√†ng ƒë√£ giao</h3>

            {/* Hi·ªÉn th·ªã loading spinner n·∫øu d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i */}
            {loading ? (
                <div className="loading-spinner">‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</div>
            ) : orders.length === 0 ? (
                <p className="revenue-page__no-orders">‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë√£ giao</p>
            ) : (
                <div className="revenue-page__table-wrapper">
                    <table className="revenue-page__table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>üë§ Kh√°ch h√†ng</th>
                                <th>üìç ƒê·ªãa ch·ªâ</th>
                                <th>üõí S·∫£n ph·∫©m</th>
                                <th>üí∞ T·ªïng ti·ªÅn</th>
                            </tr>
                        </thead>
                        <tbody>
                            {orders.map((order, index) => (
                                <tr key={order._id}>
                                    <td>{index + 1}</td>
                                    <td>
                                        <strong>{order.fullName}</strong>
                                        <br />
                                        üìû {order.phone}
                                    </td>
                                    <td>{order.address}</td>
                                    <td>
                                        <ul className="revenue-page__product-list">
                                            {order.items.map((item) => (
                                                <li key={item.productId._id}>
                                                    üè∑Ô∏è {item.productId.name} - SL: {item.quantity}
                                                </li>
                                            ))}
                                        </ul>
                                    </td>
                                    <td className="revenue-page__total-price">
                                        {order.totalPrice.toLocaleString()} VND
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}

           
        </div>
    );
};

export default RevenuePage;
