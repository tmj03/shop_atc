import React, { useEffect, useState } from "react";
import { getAllOrders, updateOrderStatus } from "../../../services/orderService";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./AdminOrderList.css"; // Import CSS

const AdminOrderList = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem("token");
  const navigate = useNavigate();

  useEffect(() => {
    if (!token) {
      toast.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p!", { position: "top-center" });
      navigate("/login");
      return;
    }

    const fetchOrders = async () => {
      try {
        const data = await getAllOrders(token);
        setOrders(data);
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng!", { position: "top-right" });
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [token, navigate]);

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await updateOrderStatus(orderId, newStatus, token);
      setOrders((prevOrders) =>
        prevOrders.map((order) =>
          order._id === orderId ? { ...order, status: newStatus } : order
        )
      );
      toast.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!", { position: "top-right" });
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
      toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!", { position: "top-right" });
    }
  };

  const handleViewOrder = (orderId) => {
    navigate(`/orders/${orderId}`);
  };

  if (loading) return <p className="order-list__loading">ƒêang t·∫£i...</p>;

  return (
    <div className="order-list">
      <h2 className="order-list__title">üì¶ Qu·∫£n l√Ω ƒê∆°n H√†ng</h2>
      <table className="order-list__table">
        <thead>
          <tr className="order-list__table-header">
            <th>#</th>
            <th>Ng∆∞·ªùi ƒë·∫∑t</th>
            <th>S·ªë ƒëi·ªán tho·∫°i</th>
            <th>ƒê·ªãa ch·ªâ</th>
            <th>S·∫£n ph·∫©m</th>
            <th>T·ªïng ti·ªÅn</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H√†nh ƒë·ªông</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {orders.map((order, index) => (
            <tr key={order._id} className="order-list__table-row">
              <td>{index + 1}</td>
              <td>{order.fullName}</td>
              <td>{order.phone}</td>
              <td>{order.address}</td>
              <td>
                {order.items.map((item) => (
                  <p key={item.productId._id} className="order-list__product">
                    {item.productId.name} - {item.quantity}x
                  </p>
                ))}
              </td>
              <td>{order.totalPrice} VND</td>
              <td>
                <span className={`order-list__status order-list__status--${order.status}`}>
                  {order.status}
                </span>
              </td>
              <td>
                <select
                  value={order.status}
                  onChange={(e) => handleStatusChange(order._id, e.target.value)}
                  className="order-list__select"
                >
                  <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
                  <option value="shipped">ƒêang giao</option>
                  <option value="delivered">ƒê√£ giao</option>
                </select>
              </td>
              <td>
                <button
                  onClick={() => handleViewOrder(order._id)}
                  className="order-list__button"
                >
                  üëÄ Xem chi ti·∫øt
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default AdminOrderList;
