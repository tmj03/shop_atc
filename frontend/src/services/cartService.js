// src/services/cartService.js
import axios from "axios";

const BASE_URL = "http://localhost:3000/api";

// üõ† H√†m l·∫•y token an to√†n t·ª´ localStorage
const getAuthHeaders = () => {
    const token = localStorage.getItem("token");

    // Ki·ªÉm tra n·∫øu token b·ªã null ho·∫∑c undefined
    if (!token) {
        console.warn("‚ö† Kh√¥ng t√¨m th·∫•y token! Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p.");
        return {}; // C√≥ th·ªÉ th√™m throw error n·∫øu token l√† b·∫Øt bu·ªôc
    }

    return { Authorization: `Bearer ${token}` };
};

// üõí L·∫•y gi·ªè h√†ng
export const getCart = async () => {
    try {
        const response = await axios.get(`${BASE_URL}/cart`, {
            headers: getAuthHeaders(),
        });

        // Ki·ªÉm tra c·∫•u tr√∫c tr·∫£ v·ªÅ t·ª´ API
        if (!response.data || !Array.isArray(response.data.items)) {
            console.error("D·ªØ li·ªáu gi·ªè h√†ng kh√¥ng h·ª£p l·ªá:", response.data);
            return { items: [], totalAmount: 0 }; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh h·ª£p l·ªá, ƒë·∫£m b·∫£o c√≥ c·∫•u tr√∫c ƒë√∫ng
        }

        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y gi·ªè h√†ng:", error);
        // Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói x·∫£y ra
        return { items: [], totalAmount: 0 };
    }
};



// ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = async (productId) => {
    try {
        const headers = getAuthHeaders();
        if (!headers.Authorization) throw new Error("Token kh√¥ng t·ªìn t·∫°i!");

        const response = await axios.post(
            `${BASE_URL}/cart`,
            { productId },
            { headers }
        );
        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:", error);
        throw new Error(error.response?.data?.message || "C√≥ l·ªói khi th√™m v√†o gi·ªè h√†ng.");
    }
};

// ‚úè C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
export const updateCartItem = async (productId, quantity) => {
    try {
        const headers = getAuthHeaders();
        if (!headers.Authorization) throw new Error("Token kh√¥ng t·ªìn t·∫°i!");

        const response = await axios.put(
            `${BASE_URL}/cart`,
            { productId, quantity },
            { headers }
        );
        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
        throw new Error(error.response?.data?.message || "C√≥ l·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng.");
    }
};

// ‚ùå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const removeFromCart = async (productId) => {
    try {
        const headers = getAuthHeaders();
        if (!headers.Authorization) throw new Error("Token kh√¥ng t·ªìn t·∫°i!");

        const response = await axios.delete(`${BASE_URL}/cart/${productId}`, {
            headers,
        });
        return response.data;
    } catch (error) {
        console.error("‚ùå L·ªói x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
        throw new Error(error.response?.data?.message || "C√≥ l·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.");
    }
};
